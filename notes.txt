

DS 
	memory 
	various forms of data storage 
	data - manage and store data 


	program => 
			application ->
				450 MB - TB - space   
				Login-> 1.5 minute -> time 
	1) time complexity 	-- time 
	2) space complexity  -- memory 


	algo -> 
		
	mil -> 
		gun , shoot gun , machine gun , sniper gun , tear gas , water gun

	border -> machine gun , sniper gun

	-> gun 	



					DS 

	Linear DS 								Non Linear DS 
	  Array 								       Tree 
	  Stack 								       Graph 	
	  Queue 
      LinkedList 


	search : binary , linear 
	
	sort : bubble , selection , insertion , merge , quick 

---------------------------------------------------------------------------------------------------------------------------------------------------------------
tools -> DS -> 
	program ->  c  c++ java ruby python 

	C -> DS ->   TC , GCC { VS }{code Block }     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------



  	 c -> array -> 
			collection of same type of data type 
			under a single data name we can store n numbers of data items 
			it allocates memory in continuous order 
			you can access array using index [ start 0 and ends with SIZE-1 ] 
			you can access using memory address --pointer 
			
			int a[10]; //2 *  10 => 20 byte 		
				a[0] : 100 
				a[1] :  102 
				a[2] : 104   	
				
			
			10 

			0	1	2	3	4	5	6	7	8	9
			200	300  	70             100  
			
		data? 
		location? 

		add(70,1); //index = location - 1;  	
		a[location-1] = data; 	
	
		add(100,2);  

		add(200,1); 

		add(300,2)




Binar Search :-

			preReq : Array Must be Sorted... 

				10	30	40	45	56	60	78	80	90	100 
	search : 60 
				0   1   2   3   4   5   6   7   8   9 
				10	30	40	45	56	60	78	80	90	100 
			                            max 
								    mid 
									min 
				mid = (min+max) / 2 
					= 0+9/2 
					=9/2 
				    =4 

				if array[mid] == search 
					flag = 1; break; 
				if search > array[mid]
					min = mid + 1 
			    if search < array[mid] 
					max = mid - 1 
			goto line num 94 

------------------------------------------------------
bubble sort :- 

	34 56 99 98 76 54 32 37 6 78 9


pass1: 
	34 56 98 76 54 32 37 6 78  9 99
                                 j  j+1

pass2:
	34 56 98 76 54 32 37 6 78  9 99
          j  j+1 		 
XXXX

XXXX

pass N-1: 




selection sort:- 
	34 56 99 98 76 54 32 37 6 78 9
    i                              j
	                       min 
pass 1: 
	6  56 99 98 76 54 32 37 34 78 9
	i                                j
                             min 

pass 2: 	
	6  9 99 98 76 54 32 37 34 78 56
	   i                                j
                                  min

pass 3: 
	6  9 32 98 76 54 99 37 34 78 56
	      i                          j
                     min

-----------------------------------------------------------------
insertion sort :- 
	34 56 99 98 76 54 32 37 6 78 9

    [34]

	[34,56]

	[34,56,99]

	[34,56,98,99]

    [34,54,56,98,99]

pass1: 
	 34 37 50 54 56 76 78 88  
                           i          
        j
	 tmp = 54 


	 for(i=1;i<SIZE;i++){
		 tmp = a[i]; 
		for(j=i-1;j>=0;j--){
			if(tmp <  a[j]){
				a[j+1]=a[j];	
			}else{
				break; 
			} 
		}
		a[j+1] = tmp; 
	 }

 
-------------------------------------------------------------------------

		
STACK -> linear data structure 
      -> LiFo  Last In First Out 
	  -> Array{static} / LinkedList{dynamic} 
	  -> is manage by TOP pointer 

		add 	-> PUSH 
		remove  -> POP
		list    -> display 
		top     -> PEEK 
		location -> item -> display -> PEEP 




	int stack[5];


	PUSH(10)
	PUSH(20); 

	4
	3
    2
	1	20 
	0	10 

	POP() -> 20 


Q: reverse string using stack:- 

enter string 
str = royal    | ahmedabad | royal ahmedabad 

push('r')
push('o')
push('y')
push('a')
push('l')

layor  | dabademha | dabademha layor 

---------------------------------------------------------------------------------
Queue:- 
		FiFo -> first in first out 
		FCFS -> first come first serve 

		























